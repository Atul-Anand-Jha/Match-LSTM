data:
  dataset:
    train_path: squad_data/SQuAD/train-v1.1.json
    dev_path: squad_data/SQuAD/dev-v1.1.json
  dataset_h5: squad_data/squad_glove.h5
  ignore_max_len: 600 # context token len > ignore_max_len will be dropped

  embedding_path: squad_data/glove.840B.300d.zip

  model_path: squad_data/model-weight.pt
  checkpoint_path: squad_data/checkpoint

model:
  global:
    random_seed: 123
    dropout_p: 0.2  # dropout between other layers
    emb_dropout_p: 0.1  # dropout between word/char embeddings and encoder
    hidden_size: 45  # one-direction
    hidden_mode: GRU # LSTM or GRU
    layer_norm: False

  encoder:
    # char-level
    char_layers: 1
    char_embedding_size: 64
    char_cnn_filter_size: [2, 3, 4, 5]
    char_cnn_filter_num: [75, 75, 75, 75]
    char_encode_type: 'LSTM' # 'LSTM' or 'CNN'
    char_trainable: True
    enable_char: True

    # word-level
    word_layers: 3
    word_embedding_size: 300

    # other
    bidirection: True
    mix_encode: True # when 'false' means separated char-encoding, else means char encoding same as methods in r-net

  interaction:
    question_match: False

    gated_attention: True
    match_lstm_bidirection: True

    enable_self_match: True
    self_match_bidirection: True

    birnn_after_self: True
    self_gated: False

  output:
    num_hops: 1 # multi-hop support
    scales: [1] # multi-scale support, for example: [1, 2, 4]. it should be [1] add some even numbers
    init_ptr_hidden: pooling # pooling, linear, None
    ptr_bidirection: True
    answer_search: True

train:
  batch_size: 32
  valid_batch_size: 32
  epoch: 30
  enable_cuda: True

  optimizer: 'adamax'  # adam, sgd, adamax, adadelta(default is adamax)
  learning_rate: 0.002  # only for sgd
  clip_grad_norm: 5

test:
  batch_size: 32
  enable_cuda: True
  is_english: True # judge what character two words split with, ' ' for english, '' for chinese